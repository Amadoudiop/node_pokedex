{"version":3,"sources":["../../../server/routes/User2.js"],"names":["express","require","User","errorManager","passwordGenerator","router","Router","getUsers","req","res","params","lean","select","query","fields","page","limit","perPage","sort","sortField","sortDir","paginate","_id","$ne","user","then","json","result","catch","error500","err","getUser","userId","id","populate","username","email","role","toString","path","findById","createUser","p","body","password","generatePassword","encrypter","encrypt","newUser","save","editUser","error401","findByIdAndUpdate","new","deleteUser","findByIdAndRemove","get","post","put","delete","module","exports"],"mappings":"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","file":"User2.js","sourcesContent":["const express = require('express')\n// const _ = require('lodash')\nconst User = require('../models/user')\nconst errorManager = require('../helpers/request-api-error')\nconst passwordGenerator = require('../services/password-generator')\n\nconst router = express.Router()\n\nconst getUsers = (req, res) => {\n    const params = {\n        lean: false,\n        select: req.query.fields,\n        page: req.query.page,\n        limit: req.query.perPage,\n        sort: { [req.query.sortField]: req.query.sortDir } }\n    User.paginate({ _id: { $ne: req.user._id } }, params)\n        .then(result => res.json(result))\n        .catch(err => errorManager.error500(res, err))\n}\n\nconst getUser = (req, res) => {\n    const userId = req.params.id\n    let populate = []\n    let fields = { username: 1, email: 1, role: 1 }\n    if (userId === req.user._id.toString()) {\n        fields = {}\n        populate = [{ path: 'contacts', select: 'username' }]\n    }\n    User.findById(userId, fields).populate(populate).then((user) => {\n        res.json(user)\n    }).catch(err => errorManager.error500(res, err))\n}\n\nconst createUser = (req, res) => {\n    const p = req.body\n    const password = passwordGenerator.generatePassword(10)\n    p.password = encrypter.encrypt(password)\n    const newUser = new User(p)\n    newUser.save().then((user) => {\n        res.json(user)\n    }).catch(err => errorManager.error500(res, err))\n}\n\nconst editUser = (req, res) => {\n    if (!req.user || req.user.role !== 2) { return errorManager.error401(res) }\n\n    const p = req.body\n    delete p._id\n\n    User.findByIdAndUpdate(req.user._id, p, { new: true }).then(result => res.json(result)).catch(err => errorManager.error500(res, err))\n}\n\nconst deleteUser = (req, res) => {\n    if (!req.user || req.user.role !== 2) { return errorManager.error401(res) }\n\n    User.findByIdAndRemove(req).then(result => res.json(result)).catch(err => errorManager.error500(res, err))\n}\n\n\nrouter.get('/', getUsers)\nrouter.get('/:id', getUser)\nrouter.post('/', createUser)\nrouter.put('/',  editUser)\nrouter.delete('/:userId', deleteUser)\n\nmodule.exports = router"]}